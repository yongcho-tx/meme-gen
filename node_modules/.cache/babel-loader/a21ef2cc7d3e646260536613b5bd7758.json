{"ast":null,"code":"var _jsxFileName = \"/Users/yong/development/assignments/module3/capstone/capstone-level3-memegenerator-yongdel/src/components/ButtonGenerator.js\";\nimport React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport MemeCard from \"./MemeCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ButtonGenerator extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      e.preventDefault();\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleReset = e => {\n      e.preventDefault();\n      this.setState({\n        topCaption: \"\",\n        bottomCaption: \"\"\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const getRandomImage = this.state.imageSrc[Math.floor(Math.random() * this.state.imageSrc.length)].url;\n      const {\n        topCaption,\n        bottomCaption,\n        randomImage,\n        id\n      } = this.state;\n      const newMeme = {\n        bottomCaption: bottomCaption,\n        topCaption: topCaption,\n        randomImage: randomImage,\n        id: id\n      };\n      this.setState(prevState => ({\n        memesList: [...prevState.memesList, newMeme]\n      }));\n      console.log(`New Meme: ${this.state.memesList}`);\n      this.setState({\n        randomImage: getRandomImage\n      });\n      this.setState({\n        topCaption: \"\",\n        bottomCaption: \"\"\n      });\n    };\n\n    this.handleDelete = index => {\n      const newMemesList = [...this.state.memesList];\n      newMemesList.splice(index, 1);\n      this.setState({\n        memesList: newMemesList\n      });\n    };\n\n    this.handleEdit = meme => {\n      const filteredMemes = this.state.memesList.filter(m => {\n        console.log(`M.id: ${m.id} Meme id: ${meme.id}`);\n        return m.id !== meme.id;\n      });\n      this.setState({\n        topCaption: meme.topCaption,\n        bottomCaption: meme.bottomCaption,\n        randomImage: meme.randomImage,\n        memesList: filteredMemes\n      });\n    };\n\n    this.state = {\n      topCaption: \"\",\n      bottomCaption: \"\",\n      randomImage: \"\",\n      newMeme: {\n        topCaption: \"\",\n        bottomCaption: \"\",\n        randomImage: \"\",\n        id: \"\"\n      },\n      imageSrc: [],\n      memesList: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(`https://api.imgflip.com/get_memes`).then(res => res.json()).then(data => {\n      const {\n        memes\n      } = data.data;\n      this.setState({\n        imageSrc: memes,\n        randomImage: memes[Math.floor(Math.random() * memes.length)].url,\n        id: memes[Math.floor(Math.random() * memes.length)].id\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      memesList\n    } = this.state;\n    const {\n      handleDelete,\n      handleEdit\n    } = this;\n    const memeComponent = memesList.map((img, index) => {\n      return /*#__PURE__*/_jsxDEV(MemeCard, {\n        handleDelete: handleDelete.bind(this, index),\n        handleEdit: handleEdit.bind(this, index),\n        index: index,\n        meme: img\n      }, img.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this);\n    });\n    const {\n      bottomCaption,\n      topCaption,\n      randomImage\n    } = this.state;\n    const {\n      handleChange,\n      handleSubmit,\n      handleReset\n    } = this;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: randomImage,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"top-cap\",\n            children: topCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"bottom-cap\",\n            children: bottomCaption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"meme-caption\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"topCaption\",\n            placeholder: \"Top Caption\",\n            value: topCaption,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"bottomCaption\",\n            placeholder: \"Bottom Caption\",\n            value: bottomCaption,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-gen\",\n            children: \"Generate Meme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-reset\",\n            onClick: handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme-card-container\",\n          children: memeComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ButtonGenerator;","map":{"version":3,"sources":["/Users/yong/development/assignments/module3/capstone/capstone-level3-memegenerator-yongdel/src/components/ButtonGenerator.js"],"names":["React","Component","MemeCard","ButtonGenerator","constructor","handleChange","e","preventDefault","name","value","target","setState","handleReset","topCaption","bottomCaption","handleSubmit","getRandomImage","state","imageSrc","Math","floor","random","length","url","randomImage","id","newMeme","prevState","memesList","console","log","handleDelete","index","newMemesList","splice","handleEdit","meme","filteredMemes","filter","m","bind","componentDidMount","fetch","then","res","json","data","memes","catch","err","render","memeComponent","map","img"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport MemeCard from \"./MemeCard\";\n\n\nclass ButtonGenerator extends Component {\n  constructor() {\n    super()\n    this.state = {\n      topCaption: \"\",\n      bottomCaption: \"\",\n      randomImage: \"\",\n      newMeme: {\n        topCaption: \"\",\n        bottomCaption: \"\",\n        randomImage: \"\",\n        id: \"\"\n      },\n      imageSrc: [],\n      memesList: []\n  }\n  this.handleChange = this.handleChange.bind(this)\n  this.handleSubmit = this.handleSubmit.bind(this)\n  this.handleReset = this.handleReset.bind(this)\n}\n\ncomponentDidMount() {\n  fetch(`https://api.imgflip.com/get_memes`)\n  .then(res => res.json())\n  .then(data => {\n      const {memes} = data.data\n      this.setState(\n          {\n              imageSrc: memes,\n              randomImage: memes[Math.floor(Math.random() * memes.length)].url,\n              id: memes[Math.floor(Math.random() * memes.length)].id\n          })\n  })\n  .catch(err => console.log(err))\n}\nhandleChange = e => {\n  e.preventDefault()\n  const {name, value} = e.target\n  this.setState({\n      [name]: value\n  })\n}\nhandleReset = e => {\n  e.preventDefault()\n  this.setState({\n      topCaption: \"\",\n      bottomCaption: \"\"\n  })\n}\nhandleSubmit = e => {\n  e.preventDefault()\n  const getRandomImage = this.state.imageSrc[Math.floor(Math.random() * this.state.imageSrc.length)].url\n  const {topCaption, bottomCaption, randomImage, id} = this.state\n  const newMeme = {\n      bottomCaption: bottomCaption,\n      topCaption: topCaption,\n      randomImage: randomImage,\n      id: id\n  }\n  this.setState(prevState => ({\n      memesList: [...prevState.memesList, newMeme]\n  }))\n  console.log(`New Meme: ${this.state.memesList}`)\n  this.setState({\n      randomImage: getRandomImage\n  })\n  this.setState({\n      topCaption: \"\",\n      bottomCaption: \"\"\n  })\n}\nhandleDelete = index => {\n      const newMemesList = [...this.state.memesList]\n      newMemesList.splice(index, 1)\n          this.setState({\n              memesList: newMemesList\n      })\n}\n\nhandleEdit = (meme) => {\n\n  const filteredMemes = this.state.memesList.filter( (m) => {\n    console.log(`M.id: ${m.id} Meme id: ${meme.id}`)\n    return m.id !== meme.id\n      \n  });\n  \n  this.setState({\n    topCaption: meme.topCaption,\n    bottomCaption: meme.bottomCaption,\n    randomImage: meme.randomImage,\n    memesList: filteredMemes\n  })\n}\n  render() {\n    const {memesList} = this.state\n    const {handleDelete, handleEdit} = this\n    const memeComponent = memesList.map((img, index) => {\n    return (<MemeCard handleDelete={handleDelete.bind(this, index)} handleEdit={handleEdit.bind(this, index)} key={img.id} index={index} meme={img}/>)\n})\n\n    const {bottomCaption, topCaption, randomImage} = this.state\n    const {handleChange, handleSubmit, handleReset} = this\n\n    return (\n      <div className=\"App\">\n\n        <div className=\"content\">\n          <div className=\"meme-container\">\n            <img src={randomImage} alt=\"\" />\n            <h2 className=\"top-cap\">{topCaption}</h2>\n            <h2 className=\"bottom-cap\">{bottomCaption}</h2>\n        </div>\n        <form className=\"meme-caption\" onSubmit={handleSubmit}>\n            <input\n            type=\"text\"\n            name=\"topCaption\"\n            placeholder=\"Top Caption\"\n            value={topCaption}\n            onChange={handleChange}\n            />\n            <input\n            type=\"text\"\n            name=\"bottomCaption\"\n            placeholder=\"Bottom Caption\"\n            value={bottomCaption}\n            onChange={handleChange}\n            />\n            <button className=\"button-gen\">Generate Meme</button>\n            <button className=\"button-reset\" onClick={handleReset}>Reset</button>\n        </form>\n          <div className=\"meme-card-container\">\n              {memeComponent}\n          </div>\n        </div>\n      </div>\n    )\n  } \n}\nexport default ButtonGenerator;\n"]},"metadata":{},"sourceType":"module"}
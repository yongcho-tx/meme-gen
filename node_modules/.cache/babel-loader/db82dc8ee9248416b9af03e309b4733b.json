{"ast":null,"code":"var _jsxFileName = \"/Users/yong/development/assignments/module3/capstone/capstone-level3-memegenerator-yongdel/src/components/MemeLogic.js\";\nimport React, { Component } from \"react\";\nimport Meme from \"./Meme\";\nimport MemeForm from \"./MemeForm\";\nimport \"../styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MemeLogic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      topCaption: \"\",\n      bottomCaption: \"\",\n      randomImage: \"\",\n      imageSrc: [],\n      memesList: []\n    };\n\n    this.randomImg = () => {\n      this.setState(prevState => {\n        return {\n          randomImage: prevState.imageSrc[Math.floor(Math.random() * prevState.imageSrc.length)].url\n        };\n      });\n    };\n\n    this.addMeme = newMeme => {\n      console.log(\"add meme was called\");\n      this.setState(prevState => {\n        return {\n          memesList: [...prevState.memesList, newMeme]\n        };\n      });\n    };\n\n    this.editMeme = (editMeme, id) => {\n      let newArray = this.state.memesList.map((meme, index) => index === id ? editMeme : meme);\n      this.setState({\n        memesList: [...newArray]\n      });\n    };\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.deleteMeme = index => {\n      console.log(`index: ${index} removed`);\n      const newMemesList = [...this.state.memesList];\n      newMemesList.splice(index, 1);\n      this.setState({\n        memesList: newMemesList\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://api.imgflip.com/get_memes`).then(res => res.json()).then(values => {\n      const {\n        memes\n      } = values.data;\n      console.log(memes);\n      this.setState({\n        imageSrc: memes,\n        randomImage: memes[Math.floor(Math.random() * memes.length)].url\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      memesList\n    } = this.state;\n    const memeComponent = memesList.map((meme, index) => /*#__PURE__*/_jsxDEV(Meme, {\n      delEvent: this.deleteMeme.bind(this, index),\n      id: index,\n      meme: meme,\n      submit: this.editMeme\n    }, Math.ceil(Math.random() * meme.id + 1), false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this));\n    const {\n      randomImage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MemeForm, {\n        submit: this.addMeme,\n        randomImage: randomImage,\n        randomImg: this.randomImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-card-container\",\n        children: memeComponent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MemeLogic;","map":{"version":3,"sources":["/Users/yong/development/assignments/module3/capstone/capstone-level3-memegenerator-yongdel/src/components/MemeLogic.js"],"names":["React","Component","Meme","MemeForm","MemeLogic","state","topCaption","bottomCaption","randomImage","imageSrc","memesList","randomImg","setState","prevState","Math","floor","random","length","url","addMeme","newMeme","console","log","editMeme","id","newArray","map","meme","index","handleChange","e","name","value","target","deleteMeme","newMemesList","splice","componentDidMount","fetch","then","res","json","values","memes","data","catch","err","render","memeComponent","bind","ceil"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Meme from \"./Meme\"\nimport MemeForm from \"./MemeForm\"\nimport \"../styles.css\"\n\nclass MemeLogic extends Component {\n\n         state = {\n            topCaption: \"\",\n            bottomCaption: \"\",\n            randomImage: \"\",\n            imageSrc: [],\n            memesList: []\n        }\n    componentDidMount() {\n        fetch(`https://api.imgflip.com/get_memes`)\n        .then(res => res.json())\n        .then(values=> {\n            const {memes} = values.data\n            console.log(memes)\n            this.setState(\n                {\n                    imageSrc: memes,\n                    randomImage: memes[Math.floor(Math.random() * memes.length)].url\n                })\n        })\n        .catch(err => console.log(err))\n    }\n    randomImg = () => {\n        this.setState(prevState => {\n            return {\n                randomImage: prevState.imageSrc[Math.floor(Math.random() * prevState.imageSrc.length)].url\n            }     \n        })\n    }\n    addMeme = (newMeme) => {\n        console.log(\"add meme was called\")\n        this.setState(prevState => {\n            return {\n                memesList: [...prevState.memesList, newMeme]\n            }\n        })\n    }\n    editMeme = (editMeme, id) => {\n            let newArray = this.state.memesList.map((meme, index) => index === id ? editMeme : meme)\n                this.setState({memesList: [...newArray]})\n    }\n    handleChange = e => {\n            const {name, value} = e.target\n            this.setState({[name]: value})\n        }\n    deleteMeme = index => {\n        console.log(`index: ${index} removed`)\n            const newMemesList = [...this.state.memesList]\n            newMemesList.splice(index, 1)\n                this.setState({\n                    memesList: newMemesList\n            })\n    }\n    render() {\n        const {memesList} = this.state\n        const memeComponent = memesList.map((meme, index) => \n        <Meme \n        delEvent={this.deleteMeme.bind(this, index)} \n        key={Math.ceil(Math.random() * meme.id + 1)} \n        id={index}\n        meme={meme}\n        submit={this.editMeme}\n        />)\n        \n        const {randomImage} = this.state\n        return (\n            <div className=\"main\">\n                <NavBar />\n                <MemeForm \n                    submit={this.addMeme}\n                    randomImage={randomImage}\n                    randomImg={this.randomImg}\n                />\n                <div className=\"meme-card-container\">\n                    {memeComponent}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeLogic\n"]},"metadata":{},"sourceType":"module"}